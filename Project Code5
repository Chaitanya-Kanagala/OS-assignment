			while (threads_reaped < threads_to_reap) {
				if (load_train_returned) {
					fprintf(stderr, "Error: station_load_train returned early!\n");
					exit(1);
				}
				if (threads_completed > 0) {
					if ((pass % 2) == 0)
						usleep(random() % 2);
					threads_reaped++;
					station_on_board(&station);
					__sync_sub_and_fetch(&threads_completed, 1);
				}
			}
	
			for (i = 0; i < 1000; i++) {
				if (i > 50 && load_train_returned)
					break;
				usleep(1000);
			}
	
			if (!load_train_returned) {
				fprintf(stderr, "Error: station_load_train failed to return\n");
				exit(1);
			}
	
			while (threads_completed > 0) {
				threads_reaped++;
				__sync_sub_and_fetch(&threads_completed, 1);
			}
	
			passengers_left -= threads_reaped;
			total_passengers_boarded += threads_reaped;
			printf("Train departed station with %d new passenger(s) (expected %d)%s\n",
				threads_to_reap, threads_reaped,
				(threads_to_reap != threads_reaped) ? " *****" : "");
	
			if (threads_to_reap != threads_reaped) {
				fprintf(stderr, "Error: Too many passengers on this train!\n");
				exit(1);
			}
	
			pass++;
		}
	
		if (total_passengers_boarded == total_passengers) {
			printf("Looks good!\n");
			return 0;
		} else {
	
			fprintf(stderr, "Error: expected %d total boarded passengers, but got %d!\n",
				total_passengers, total_passengers_boarded);
			return 1;
		}
	}

